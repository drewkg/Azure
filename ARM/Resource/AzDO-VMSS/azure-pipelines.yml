trigger:
  branches:
    include:
    - master

stages:
- stage: QABuild
  displayName: "QA Build"

  jobs:
  - job: Basic
    displayName: "Build Basic Environment"
    pool:
      vmImage: 'windows-latest'
    continueOnError: false
    workspace:
      clean: outputs
    timeoutInMinutes: 120

    steps:

    - task: AzurePowerShell@5
      displayName: "Register Resource Provider"
      inputs:
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain'
        ScriptType: 'InlineScript'
        Inline: |
          Register-AzProviderFeature -FeatureName VirtualMachineTemplatePreview -ProviderNamespace Microsoft.VirtualMachineImages
        azurePowerShellVersion: 'LatestVersion'

    - task: AzurePowerShell@5
      displayName: "Clean Environment"
      inputs:
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain'
        ScriptType: 'InlineScript'
        Inline: |
          Select-AzSubscription -Subscription 28fe843b-a2d0-4f2a-97b4-cbd2a52a968e
          Do {
            Get-AzResource -ResourceGroupName 'RG-DevOps-QA-BuildAgent-Management' -ResourceName 'DriveTrainWinPS01' -ResourceType 'Microsoft.VirtualMachineImages/imageTemplates' -ErrorAction SilentlyContinue | Remove-AzResource -ErrorAction SilentlyContinue -Force | Out-Null
            Start-Sleep -Seconds 30
          } Until ( $null -eq (Get-AzResource -ResourceGroupName 'RG-DevOps-QA-BuildAgent-Management' -ResourceName 'DriveTrainWinPS01' -ResourceType 'Microsoft.VirtualMachineImages/imageTemplates' -ErrorAction SilentlyContinue))
        azurePowerShellVersion: 'LatestVersion'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**'
        TargetFolder: '$(build.artifactstagingdirectory)'
        flattenFolders: false

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/drivetrainwinps.zip'
        replaceExistingArchive: true

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: "Create Update Shared Image Gallery"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'New Signature - GMS - Service Delivery - DriveTrain'
        subscriptionId: '28fe843b-a2d0-4f2a-97b4-cbd2a52a968e'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'RG-DevOps-QA-BuildAgent-Management'
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: 'DriveTrain/template.json'
        deploymentMode: 'Incremental'

    - task: ARM Outputs@5
      inputs:
        ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
        ConnectedServiceNameARM: 'New Signature - GMS - Service Delivery - DriveTrain'
        resourceGroupName: 'RG-DevOps-QA-BuildAgent-Management'
        prefix: 'BuildAgents'
        whenLastDeploymentIsFailed: 'fail'

    - task: AzureFileCopy@4
      inputs:
        SourcePath: '$(build.artifactstagingdirectory)\drivetrainwinps.zip'
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain'
        Destination: 'AzureBlob'
        storage: 'sadrivetrainazdoagentsqa'
        ContainerName: 'drivetrainwinps'

    - task: AzureFileCopy@4
      inputs:
        SourcePath: '$(build.artifactstagingdirectory)\Powershell\Extensions\AddAgentToVM.ps1'
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain'
        Destination: 'AzureBlob'
        storage: 'sadrivetrainazdoagentsqa'
        ContainerName: 'vmextensions'

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: "Upload Image Template"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'New Signature - GMS - Service Delivery - DriveTrain'
        subscriptionId: '28fe843b-a2d0-4f2a-97b4-cbd2a52a968e'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'RG-DevOps-QA-BuildAgent-Management'
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: 'DriveTrain-Win-PS-01/DriveTrain-Win-PS-01.json'
        csmParametersFile: 'DriveTrain-Win-PS-01/DriveTrain-Win-PS-01.qa.parameters.json'
        deploymentMode: 'Incremental'

    - task: AzurePowerShell@5
      displayName: "Build and Distribute Image"
      continueOnError: false
      inputs:
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain'
        ScriptType: 'InlineScript'
        Inline: |
          Select-AzSubscription -Subscription 28fe843b-a2d0-4f2a-97b4-cbd2a52a968e

          Invoke-AzResourceAction -ResourceGroupName RG-DevOps-QA-BuildAgent-Management -ResourceName DriveTrainWinPS01 -ResourceType 'Microsoft.VirtualMachineImages/imageTemplates' -Action Run -Force

          # This loop gets the state of the Azure Image Builder run
          Do {
            ### Step 1: Update context
            $currentAzureContext = Get-AzContext

            ### Step 2: Get instance profile
            $azureRmProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
            $profileClient = New-Object Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient($azureRmProfile)

            Write-Verbose ("Tenant: {0}" -f  $currentAzureContext.Subscription.Name)

            ### Step 4: Get token
            $token = $profileClient.AcquireAccessToken($currentAzureContext.Tenant.TenantId)
            $accessToken=$token.AccessToken

            $managementEp = $currentAzureContext.Environment.ResourceManagerUrl
            $ResourceGroup = "RG-DevOps-QA-BuildAgent-Management"

            $urlBuildStatus = [System.String]::Format("{0}subscriptions/{1}/resourceGroups/{2}/providers/Microsoft.VirtualMachineImages/imageTemplates/{3}?api-version=2019-05-01-preview", $managementEp, '28fe843b-a2d0-4f2a-97b4-cbd2a52a968e',$ResourceGroup, 'DriveTrainWinPS01')

            $buildStatusResult = Invoke-RestMethod -Method GET  -Uri $urlBuildStatus -UseBasicParsing -Headers  @{"Authorization"= ("Bearer " + $accessToken)} -ContentType application/json
            Write-Host $buildStatusResult.properties.lastRunStatus.runState
            Write-Host $buildStatusResult.properties.lastRunStatus.runSubState
            Start-Sleep -Seconds 120
          } While ($buildStatusResult.properties.lastRunStatus.runState -eq 'Running')

          If ($buildStatusResult.properties.lastRunStatus.runState -eq 'Failed') {
            Write-Host "##vso[task.complete result=Failed;]DONE"
          }
        azurePowerShellVersion: 'LatestVersion'

  - job: Test
    displayName: "QA Test"
    dependsOn: "Basic"
    pool: 'Drivetrain QA'

    steps:
    - task: PowerShell@2
      displayName: "Dump Modules Folder Contents so we can see what's wrong with the build"
      inputs:
        targetType: "inline"
        workingDirectory: '$(Build.SourcesDirectory)'
        script: |
          Get-Module -ListAvailable

- stage: PromoteProduction
  displayName: "Promote to Production"
  dependsOn: "QABuild"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  jobs:
  - job: Basic
    displayName: "Build Basic Environment"
    pool:
      vmImage: 'windows-latest'
    continueOnError: false
    workspace:
      clean: outputs
    timeoutInMinutes: 120

    steps:

    - task: AzurePowerShell@5
      displayName: "Register Resource Provider"
      inputs:
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain Production'
        ScriptType: 'InlineScript'
        Inline: |
          Register-AzProviderFeature -FeatureName VirtualMachineTemplatePreview -ProviderNamespace Microsoft.VirtualMachineImages
        azurePowerShellVersion: 'LatestVersion'

    - task: AzurePowerShell@5
      displayName: "Clean Environment"
      inputs:
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain Production'
        ScriptType: 'InlineScript'
        Inline: |
          Select-AzSubscription -Subscription 49dbf3b7-c3a3-4b6d-a1c6-0526edcc3c1e
          Do {
            Get-AzResource -ResourceGroupName 'RG-DevOps-Prod-BuildAgent-Management' -ResourceName 'DriveTrainWinPS01' -ResourceType 'Microsoft.VirtualMachineImages/imageTemplates' -ErrorAction SilentlyContinue | Remove-AzResource -ErrorAction SilentlyContinue -Force | Out-Null
            Start-Sleep -Seconds 30
          } Until ( $null -eq (Get-AzResource -ResourceGroupName 'RG-DevOps-Prod-BuildAgent-Management' -ResourceName 'DriveTrainWinPS01' -ResourceType 'Microsoft.VirtualMachineImages/imageTemplates' -ErrorAction SilentlyContinue))
        azurePowerShellVersion: 'LatestVersion'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**'
        TargetFolder: '$(build.artifactstagingdirectory)'
        flattenFolders: false

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/drivetrainwinps.zip'
        replaceExistingArchive: true

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: "Create Update Shared Image Gallery"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'New Signature - GMS - Service Delivery - DriveTrain Production'
        subscriptionId: '49dbf3b7-c3a3-4b6d-a1c6-0526edcc3c1e'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'RG-DevOps-Prod-BuildAgent-Management'
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: 'DriveTrain/template.json'
        csmParametersFile: 'DriveTrain/template.prod.parameters.json'
        deploymentMode: 'Incremental'

    - task: AzureFileCopy@4
      inputs:
        SourcePath: '$(build.artifactstagingdirectory)\drivetrainwinps.zip'
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain Production'
        Destination: 'AzureBlob'
        storage: 'sadrivetrainprazdoagents'
        ContainerName: 'drivetrainwinps'

    - task: AzureFileCopy@4
      inputs:
        SourcePath: '$(build.artifactstagingdirectory)\Powershell\Extensions\AddAgentToVM.ps1'
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain Production'
        Destination: 'AzureBlob'
        storage: 'sadrivetrainprazdoagents'
        ContainerName: 'vmextensions'

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: "Upload Image Template"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'New Signature - GMS - Service Delivery - DriveTrain Production'
        subscriptionId: '49dbf3b7-c3a3-4b6d-a1c6-0526edcc3c1e'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'RG-DevOps-Prod-BuildAgent-Management'
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: 'DriveTrain-Win-PS-01/DriveTrain-Win-PS-01.json'
        csmParametersFile: 'DriveTrain-Win-PS-01/DriveTrain-Win-PS-01.prod.parameters.json'
        deploymentMode: 'Incremental'

    - task: AzurePowerShell@5
      displayName: "Build and Distribute Image"
      continueOnError: false
      inputs:
        azureSubscription: 'New Signature - GMS - Service Delivery - DriveTrain Production'
        ScriptType: 'InlineScript'
        Inline: |
          Select-AzSubscription -Subscription 49dbf3b7-c3a3-4b6d-a1c6-0526edcc3c1e

          Invoke-AzResourceAction -ResourceGroupName RG-DevOps-Prod-BuildAgent-Management -ResourceName DriveTrainWinPS01 -ResourceType 'Microsoft.VirtualMachineImages/imageTemplates' -Action Run -Force

          # This loop gets the state of the Azure Image Builder run
          Do {
            ### Step 1: Update context
            $currentAzureContext = Get-AzContext

            ### Step 2: Get instance profile
            $azureRmProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
            $profileClient = New-Object Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient($azureRmProfile)

            Write-Verbose ("Tenant: {0}" -f  $currentAzureContext.Subscription.Name)

            ### Step 4: Get token
            $token = $profileClient.AcquireAccessToken($currentAzureContext.Tenant.TenantId)
            $accessToken=$token.AccessToken

            $managementEp = $currentAzureContext.Environment.ResourceManagerUrl
            $ResourceGroup = "RG-DevOps-Prod-BuildAgent-Management"

            $urlBuildStatus = [System.String]::Format("{0}subscriptions/{1}/resourceGroups/{2}/providers/Microsoft.VirtualMachineImages/imageTemplates/{3}?api-version=2019-05-01-preview", $managementEp, '49dbf3b7-c3a3-4b6d-a1c6-0526edcc3c1e',$ResourceGroup, 'DriveTrainWinPS01')

            $buildStatusResult = Invoke-RestMethod -Method GET  -Uri $urlBuildStatus -UseBasicParsing -Headers  @{"Authorization"= ("Bearer " + $accessToken)} -ContentType application/json
            Write-Host $buildStatusResult.properties.lastRunStatus.runState
            Write-Host $buildStatusResult.properties.lastRunStatus.runSubState
            Start-Sleep -Seconds 120
          } While ($buildStatusResult.properties.lastRunStatus.runState -eq 'Running')

          If ($buildStatusResult.properties.lastRunStatus.runState -eq 'Failed') {
            Write-Host "##vso[task.complete result=Failed;]DONE"
          }
        azurePowerShellVersion: 'LatestVersion'